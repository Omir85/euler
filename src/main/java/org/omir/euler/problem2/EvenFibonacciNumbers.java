package org.omir.euler.problem2;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.IntStream;

/**
 * <pre>
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 * By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 * </pre>
 *
 * @author Jean-Michel BERNARD
 *
 */
public class EvenFibonacciNumbers {

	private static Map<Integer, Integer> fibonacciNumbers = new HashMap<>();

	public static void main(String[] args) {
		System.out.println("The sum of the even-valued Fibonacci terms below four million is " + getSumOfEvenFibonacciTermsBelow(4000000));
	}

	public static boolean isEven(int i) {
		return i % 2 == 0;
	}

	public static int[] getFibonacciNumbers(int range) {
		return IntStream.iterate(1, i -> i + 1)
				.limit(range)
				.map(number -> getFibonacciNumber(number))
				.toArray();
	}

	public static int getFibonacciNumber(int number) {
		Integer key = Integer.valueOf(number);
		if (fibonacciNumbers.get(key) == null) {
			fibonacciNumbers.put(
					key,
					(number - 2 <= 0)
							? number
							: getFibonacciNumber(number - 1) + getFibonacciNumber(number - 2)
			);
		}
		return fibonacciNumbers.get(Integer.valueOf(number));
	}

	public static int[] getFibonacciNumbersBelow(int limit) {
		for (int i = 1; getFibonacciNumber(i) < limit; i++) {}
		return getFibonacciNumbers(fibonacciNumbers.size() - 1);
	}

	public static int getSumOfEvenFibonacciTermsBelow(int i) {
		return castArrayToList(getFibonacciNumbersBelow(i)).stream()
				.filter(number -> EvenFibonacciNumbers.isEven(number))
				.reduce(0, Integer::sum);
	}

	public static List<Integer> castArrayToList(int[] array) {
		List<Integer> list = new ArrayList<>();
		for (int i : array) {
			list.add(i);
		}
		return list;
	}

}
