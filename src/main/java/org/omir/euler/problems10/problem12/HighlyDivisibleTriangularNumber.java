package org.omir.euler.problems10.problem12;

import org.omir.euler.exception.ResultNotFoundException;
import org.omir.euler.utils.math.NumberUtils;

/**
 * <pre>
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
 * 
 * The first ten terms would be:
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * 
 * Let us list the factors of the first seven triangle numbers:
 *  1: 1
 *  3: 1,3
 *  6: 1,2,3,6
 *  10: 1,2,5,10
 *  15: 1,3,5,15
 *  21: 1,3,7,21
 *  28: 1,2,4,7,14,28
 * 
 * We can see that 28 is the first triangle number to have over five divisors.
 * 
 * What is the value of the first triangle number to have over five hundred divisors?
 * </pre>
 * 
 * @author Omir
 *
 */
public class HighlyDivisibleTriangularNumber {

	public static void main(String[] args) {
		System.out.println("The first triangle number to have over five hundred divisors is " + getFirstTriangleNumberWithAtLeastNFactors(500));
	}

	public static long getFirstTriangleNumberWithAtLeastNFactors(int numberOfFactors) {
		return getFirstTriangleNumberWithAtLeastNFactorsStartingWith(numberOfFactors, 1);
	}

	public static long getFirstTriangleNumberWithAtLeastNFactorsStartingWith(int numberOfFactors, int startingNumber) {
		for (int i = startingNumber; i < Integer.MAX_VALUE; i++) {
			long triangleNumber = NumberUtils.getTriangleNumber(i);
			int currentNumberOfFactors = NumberUtils.getFactorsOf(triangleNumber).size();
			if (currentNumberOfFactors >= numberOfFactors) {
				return triangleNumber;
			}
		}
		throw new ResultNotFoundException();
	}

}
